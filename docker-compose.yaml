x-logging: &default-logging
  driver: loki
  options:
    loki-url: 'http://localhost:3100/api/prom/push'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<date>\d{4}-\d{2}-\d{2}) (?P<time>\d{2}:\d{2}:\d{2}.\d{3}) (?P<message>(?s:.*))$$'

version: "3.4"

services:

  # Infrastructure

  loki:
    image: grafana/loki:2.9.2
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - my-network

  prometheus:
    image: prom/prometheus:v2.47.2
    ports:
      - "9090:9090"
    volumes:
      - ./etc/prometheus:/workspace
    command:
      - --config.file=/workspace/prometheus.yml
      - --enable-feature=exemplar-storage
    depends_on:
      - loki
    networks:
      - my-network
    logging: *default-logging

  tempo:
    image: grafana/tempo:2.2.4
    command: [ "--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false" ]
    ports:
      - "14250:14250"
      - "4317:4317"
    depends_on:
      - loki
    networks:
      - my-network
    logging: *default-logging

  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3000:3000"
    volumes:
      - ./etc/grafana/:/etc/grafana/provisioning/datasources
      - ./etc/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./etc/dashboards:/etc/grafana/dashboards
    depends_on:
      - loki
      - prometheus
    networks:
      - my-network
    logging: *default-logging

  # Applications

  db:
    image: mysql:latest
    restart: on-failure
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: abc123
      MYSQL_DATABASE: example
    volumes:
      - ./DB:/var/lib/mysql
    networks:
      - my-network

  kafka:
    container_name: kafka
    #    restart: always
    image: 'bitnami/kafka:3.5.1'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker

      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092, CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - ./kafka:/bitnami/kafka
    networks:
      - my-network

  kafka-ui:
    container_name: kafka-ui
    restart: always
    image: provectuslabs/kafka-ui:latest
    ports:
      - '8088:8088'
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      SERVER_PORT: 8088
    networks:
      - my-network

  api:
    # build: ./app/
    image: pmatuan/java-base:latest
    command:
      - "java"
      - "-javaagent:/opentelemetry-javaagent.jar"
      - "-jar"
      - "api.jar"
    environment:
      ACTIVE_PROFILE: docker
      SERVER_PORT: 8080
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4317 # send traces to Tempo
      OTEL_SERVICE_NAME: api # service name for Span
      OTEL_RESOURCE_ATTRIBUTES: compose_service=api # add custom resource attribute to Span for Grafana Trace to Logs feature
      OTEL_METRICS_EXPORTER: none # disable metrics exporter
      MANAGEMENT_METRICS_TAGS_APPLICATION: api # override default value of management.metrics.tags.application in app/src/main/resources/application.properties
    ports:
      - "8080:8080"
    networks:
      - my-network
    depends_on:
      - db
      - kafka
    logging: *default-logging

  consumer:
    # build: ./app/
    image: pmatuan/java-base:latest
    command:
      - "java"
      - "-javaagent:/opentelemetry-javaagent.jar"
      - "-jar"
      - "consumer.jar"
    environment:
      ACTIVE_PROFILE: docker
      SERVER_PORT: 8081
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4317
      OTEL_SERVICE_NAME: consumer
      OTEL_RESOURCE_ATTRIBUTES: compose_service=consumer
      OTEL_METRICS_EXPORTER: none
      MANAGEMENT_METRICS_TAGS_APPLICATION: consumer
    ports:
      - "8081:8081"
    networks:
      - my-network
    depends_on:
      - db
      - kafka
    logging: *default-logging

networks:
  my-network:
    driver: bridge
  default:
    driver: bridge